<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">
    <info>
        <title>Administration Guide</title>
        <author>
            <personname>
                <firstname>Amir</firstname>
                <surname>Zeldes</surname>
            </personname>
            <email>annis-admin@ling.uni-potsdam.de</email>
        </author>
        <author>
            <personname>
                <firstname>Thomas</firstname>
                <surname>Krause</surname>
            </personname>
            <email>thomas.krause@alumni.hu-berlin.de</email>
        </author>
        <orgname>SFB 632 Information Structure / D1 Linguistic Database</orgname>
        <orgname>Humboldt-Universität zu Berlin &amp; Universität Potsdam</orgname>
        <releaseinfo>Version ${project.version}</releaseinfo>
        <pubdate>${mavenBuildTimestamp}</pubdate>

    </info>
    <section>
        <title>Building and Installing an ANNIS public server</title>
        <para>The ANNIS server version can be installed on UNIX based server, or else under Windows
            using <link xlink:href="http://www.cygwin.com/">Cygwin</link>, the freely available UNIX
            emulator. To install the ANNIS server: 
            <procedure>
                <step>
                    <para>Install a PostgreSQL 9.2 server for your operating system from <link
                            xlink:href="http://www.postgresql.org/download/"
                            >http://www.postgresql.org/download/</link> and <emphasis role="bold"
                            >make a note of the administrator password you set during the
                            installation</emphasis>. </para>
                    <note><para>Under Linux, you might have to set the
                        PostgreSQL password manually. E.g. on Ubuntu you can achieve this with by running the following
                        commands:</para>
                    <para>
                        <programlisting>sudo -u postgres psql
\password
\q</programlisting></para></note>
                </step>
                <step>
                    <para>Install a web server such as <link xlink:href="http://tomcat.apache.org/"
                            >Tomcat</link> or <link xlink:href="http://www.mortbay.org/jetty/"
                            >Jetty</link>
                    </para>
                </step>
                <step>
                    <para>Make sure you have <link
                            xlink:href="http://java.sun.com/javase/downloads/index.jsp">JDK 6</link>
                        and <link xlink:href="http://maven.apache.org/">Maven 3</link> (or install
                        them if you don’t) </para>
                </step>
                <step>
                    <para>If you’re using Cygwin and Windows you will also need to install the
                        “patch” program via the Cygwin package manager </para>
                </step>
                <step>
                    <para>Download and unzip <link
                            xlink:href="http://launchpad.net/annis/2.2/2.2.1/+download/Annis-2.2.1.zip"
                            >Annis-2.2.1.zip</link>, then run the following commands (replacing the
                        appropriate directories):</para>
                    <para>
                        <programlisting>cd &lt;unzipped source>/Annis-Service
mvn -DskipTests=true install 
mvn -DskipTests=true assembly:assembly tar xzvf
target/annis-service-&lt;version>-distribution.tar.gz↵
    -C &lt;installation directory&gt;</programlisting>
                    </para>
                </step>
                <step>
                    <para>Set the environment variables (each time when starting up) </para>
                    <para>
                        <programlisting>export ANNIS_HOME=&lt;installation directory>
export PATH=$PATH:$ANNIS_HOME/bin</programlisting>
                    </para>
                </step>
                <step>
                    <para>Next initialize your ANNIS database (only the first time you use the
                        system):</para>
                    <programlisting>annis-admin.sh init -u &lt;username> -d &lt;dbname> -p  &lt;password&gt;↵
    -P &lt;postgres password></programlisting>
                </step>
                <step>
                    <para>Now you can import some corpora: </para>
                    <para>
                        <programlisting>annis-admin.sh import path/to/corpus1 path/to/corpus2 ...</programlisting>
                    </para>
                    <para>
                        <important>
                            <para>The above import-command calls other PostgreSQL database commands.
                                If you abort the import script with Ctrl+C, these SQL processes will
                                not be automatically terminated; instead they might keep hanging and
                                prevent access to the database. The same might happen if you close
                                your shell before the import script terminates, so you will want to
                                prefix it with the "nohup"-command. </para>
                        </important>
                    </para>
                </step>
                <step>
                    <para>Now you can start the ANNIS service: </para>
                    <para>
                        <programlisting>annis-service.sh start</programlisting>
                    </para>
                </step>
                <step>
                    <para>To get the ANNIS front-end running, first compile it: </para>
                    <para>
                        <programlisting>cd &lt;unzipped source>
mvn -DskipTests=true install</programlisting>
                    </para>
                    <para>If no error occurs the war-file will be available under 4
                            <filename>&lt;unzipped
                        source>/Annis-web/target/Annis-web.war</filename>. </para>
                </step>
                <step>
                    <para>And configure your web server as described here: <link
                            xlink:href="https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Tomcat "
                            >https://korpling.german.hu-berlin.de/p/projects/annis/wiki/Tomcat
                        </link></para>
                </step>
            </procedure></para>
        <para>We also <emphasis role="bold">strongly recommend</emphasis> reconfiguring the Postgres
            server’s default settings as described here: <link
                xlink:href="https://korpling.german.hu-berlin.de/p/projects/annis/wiki/PostgreSQL"
                >https://korpling.german.hu-berlin.de/p/projects/annis/wiki/PostgreSQL</link>
        </para>
    </section>
    <section>
        <title>ANNIS back-end service</title>
        <section>
            <title>User Configuration</title>
            <para>ANNIS has an authentication system which allows to handle multiple users which
                will see different corpora depending on which groups the user is part of. Behind the
                scenes ANNIS uses the <link xlink:href="http://shiro.apache.org/">Apache
                    Shiro</link> security framework. Per default ANNIS uses a file based
                authentication and authorization approach where some configuration files with an
                ANNIS specific layout are evaluated. This section will discuss how to manage this
                configuration. Additionally, the adminstrator can also directly adjust the contents
                of the <filename>conf/shiro.ini</filename> configuration file. This allows a much
                more individual configuration and the usage of external authorization services like
                LDAP. </para>
            
            <section>
                <title>Configuration file location</title>
                <para>There is a central location where the user configuration files are stored.
                    Configure the path to this location in the <filename>conf/shiro.info</filename>
                    configuration file of the ANNIS service. The default path is
                        <filename>/etc/annis/user_config_trunk/</filename> and must be changed at
                        <emphasis role="italic">two locations</emphasis> in the configuration
                    file.<programlisting>[main]
annisRealm = annis.security.ANNISUserRealm
<emphasis role="bold">annisRealm.resourcePath=/etc/annis/user_config_trunk/</emphasis>
annisRealm.authenticationCachingEnabled = true

globalPermResolver = annis.security.ANNISRolePermissionResolver
<emphasis role="bold">globalPermResolver.resourcePath = /etc/annis/user_config_trunk/</emphasis>
</programlisting></para>
            </section>
            <section>
                <title>User and group files</title>
                <procedure>
                    <step>
                        <para>Create a file "groups" in the user-configuration directory (e.g.
                            <filename>/etc/annis/user_config_trunk/groups</filename>):<programlisting>group1=pcc3,falko,tiger2
group2=pcc3
group3=tiger1
demo=pcc2,falko</programlisting>This
                            example means that a member of group group1 will have access to corpora
                            with the names pcc3,falko, tiger2 (corpus names can be displayed with
                            "<command>annis-admin.sh list</command>").</para>
                    </step>
                    <step>
                        <para>Create a subdirectory <filename>users</filename></para>
                    </step>
                    <step>
                        <para>You have the create a file for each user inside the
                                <filename>users</filename> subdirectory where the user's name is
                                <emphasis role="italic">exactly</emphasis> the file name (no file endings).<programlisting>groups=group1,group3
password=$shiro1$SHA-256$1$Kne+VMg3qnT/zTPK/laSOQ==$lMLO4hAu[...]
given_name=userGivenName
surname=userSurname</programlisting><itemizedlist>
                                <listitem>
                                    <para>A superuser who has access to every corpus can be created
                                        with "groups=*"</para>
                                </listitem>
                                <listitem>
                                    <para><code>given_name</code> and <code>surname</code> can be
                                        anything</para>
                                </listitem>
                                <listitem>
                                    <para>The password must be hashed with SHA256 (one iteration and
                                        using a Salt) and formatted in the <classname><link
                                                xlink:href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/crypto/hash/format/Shiro1CryptFormat.html"
                                                >Shiro1CryptFormat</link></classname>. </para>
                                    <para>The easiest way to generate the passwort hash is to use
                                            the<link
                                            xlink:href="http://shiro.apache.org/command-line-hasher.html"
                                            > Apache Shiro command line hasher</link> which can be
                                        downloaded from <link
                                            xlink:href="http://shiro.apache.org/download.html#Download-1.2.1.BinaryDistribution"
                                            >http://shiro.apache.org/download.html#Download-1.2.1.BinaryDistribution</link>. </para>
                                    <para>
                                        <procedure>
                                            <step>
                                                <para>Execute <command>java -jar
                                                  shiro-tools-hasher-1.2.1-cli.jar -i 1 -p</command>
                                                  from the command line (the jar-file must be in the
                                                  working directory)</para>
                                            </step>
                                            <step>
                                                <para>Type the password</para>
                                            </step>
                                            <step>
                                                <para>Retype the password</para>
                                            </step>
                                            <step>
                                                <para>It will produce the following
                                                  output:<screen>$ java -jar shiro-tools-hasher-1.2.1-cli.jar -i 1 -p
Password to hash: 
Password to hash (confirm): 
$shiro1$SHA-256$1$Kne+VMg3qnT/zTPK/laSOQ==$lMLO4hAu[...]</screen>The
                                                  last line is what you have to insert into the
                                                  password field.</para>
                                            </step>
                                        </procedure>
                                    </para>
                                </listitem>
                            </itemizedlist></para>
                    </step>
                </procedure>
            </section>
        </section>
    </section>
    <section>
        <title>Front-end web application</title>
        <section>
            <title>Configuring Tomcat or Jetty as application container</title>
            <para>The build process will produce a war-file that is deployable by every common Java
                Servlet Container like Tomcat or Jetty. Please use the documentation of the web
                application container of your choice how to deploy these war-files.</para>
            <section>
                <title>UTF8 encoding in server.xml</title>
                <para>searching for non-ASCII characters.In order to avoid the
                    Connector-configuration needs the property "URIEncoding" set to "UTF-8" like in
                    this example
                    (<filename>$CATALINA_HOME/server.xml</filename>):<programlisting>&lt;Connector port="8080" protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               URIEncoding="UTF-8" &lt;!-- this line must be present -->
               redirectPort="8443" 
               executor="tomcatThreadPool" /></programlisting></para>
            </section>
        </section>
        
        <section>
            <title>Configuring Visualizations </title>
            <section>
                <title>Triggering Visualizations with the Resolver Table</title>
                <para>By default, ANNIS displays all search results in the Key Word in Context
                    (KWIC) view in the search result window. Further visualizations, such as syntax
                    trees or grid views, are displayed by default based on the following namespaces:
                        <informaltable frame="void">
                        <tbody>
                            <tr>
                                <td>Nodes with the namespace tiger:</td>
                                <td>tree visualizer</td>
                            </tr>
                            <tr>
                                <td>Nodes with the namespace exmaralda:</td>
                                <td>grid visualizer</td>
                            </tr>
                            <tr>
                                <td>Edges with the namespace mmax:</td>
                                <td>discourse view</td>
                            </tr>
                            <tr>
                                <td>Nodes with the namespace external:</td>
                                <td>multimedia player</td>
                            </tr>
                        </tbody>
                    </informaltable> In these cases the namespaces are usually taken from the source
                    format in which the corpus was generated, and carried over into relAnnis during
                    the conversion. It is also possible to use other namespaces, most easily when
                    working with PAULA XML. In PAULA XML, the namespace is determined by the string
                    prefix before the first period in the file name / paula_id of each annotation
                    layer. In order to manually determine the visualizer and the display name for
                    each namespace in each corpus, the resolver table in the database must be
                    edited. To do so, open PGAdmin (or if you did not install PGAdmin with ANNIS
                    then via PSQL), and access the table
                            <emphasis><database>resolver_vis_map</database></emphasis> (it can be
                    found in PGAdmin under <emphasis>PostgreSQL 9.1 > Databases > anniskickstart >
                        Schemas > public > Tables</emphasis> (for ANNIS servers replace
                    “anniskickstart” with “annis_db”). You may need to give your PostgreSQL password
                    to gain access. Right click on the table and select <emphasis>View Data > View
                        All Rows</emphasis>. The table should look like this:<screenshot>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/resolver_table.png" width="100%"
                                    align="center"/>
                            </imageobject>
                            <caption>
                                <para>Resolver table (resolver_vis_map)</para>
                            </caption>
                        </mediaobject>
                    </screenshot>
                </para>
                <para>The columns in the table can be filled out as follows:<itemizedlist>
                        <listitem>
                            <para><emphasis role="italic">corpus</emphasis> determines the corpora
                                for which the instruction is valid (null values apply to all
                                corpora)</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">namespace</emphasis> specifies relevant
                                namespace which triggers the visualization</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">element</emphasis> determines if a node or
                                an edge should carry the relevant annotation for triggering the
                                visualization</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">vis_type</emphasis> determines the
                                visualizer module used and is one of: <itemizedlist>
                                    <listitem>
                                        <para><emphasis role="italic">tree</emphasis> (annotation
                                            grid, with annotations spanning multiple tokens)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/tiger_tree_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">grid</emphasis> (constituent
                                            syntax tree)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/grid_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">grid_tree</emphasis> (a grid
                                            visualizing hierarchical tree annotations as ordered
                                            grid layers; note that all layers represent the same
                                            annotation name at different hierarchical depths, marked
                                            level:0,1,2,… etc. on the left)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/grid_tree_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                        <para>A known Bug is, that equal annotation names which
                                            cover the same range or a subset of nodes and have the
                                            same hierarchical depths are not rendered correctly by
                                            grid_tree.</para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">discourse</emphasis> (a view
                                            of the entire text of a document, possibly with
                                            interactive coreference links. It is possible to use
                                            this visualization to view entire texts even if you do
                                            not have coreference annotations)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/discourse_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">arch_dependency</emphasis>
                                            (dependency tree with labeled arches between tokens;
                                            requires SVG enabled browser, see <xref
                                                linkend="annis-admin-vis-software-requirement"/>)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata
                                                  fileref="images/arch_dependency_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">ordered_dependency</emphasis>
                                            (arrow based dependency visualization for corpora with
                                            dependencies between non terminal nodes; requires
                                            GraphViz, see <xref
                                                linkend="annis-admin-vis-software-requirement"/>)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata
                                                  fileref="images/ordered_dependency_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic"
                                                >hierarchical_dependency</emphasis> (unordered
                                            vertical tree of dependent tokens; requires GraphViz,
                                            see <xref linkend="annis-admin-vis-software-requirement"/>)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata
                                                  fileref="images/hierarchical_dependency_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">graph</emphasis> (a debug view
                                            of the annotation graph; requires GraphViz, see 5.2)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/graph_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">file</emphasis> (a linked
                                            multimedia file)<screenshot>
                                                <mediaobject>
                                                  <imageobject>
                                                  <imagedata fileref="images/file_vis.png"
                                                  width="70%" align="center"/>
                                                  </imageobject>
                                                </mediaobject>
                                            </screenshot></para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">display_name</emphasis> determines the
                                heading that is shown for each visualizer in the interface</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">order</emphasis> determines the order in
                                which visualizers are rendered in the interface (low to high)</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="italic">mappings</emphasis> provides additional
                                parameters for some visualizations:<itemizedlist>
                                    <listitem>
                                        <para><emphasis role="italic">tree</emphasis> – the
                                            annotation names to be displayed in non terminal nodes
                                            can be set e.g. using
                                                <userinput>node_key:cat</userinput> for an
                                            annotation called cat (the default), and similarly the
                                            edge labels using <userinput>edge_key:func</userinput>
                                            for an edge label called <userinput>func</userinput>
                                            (the default). Instructions are separated using
                                            semicolons.</para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">graph</emphasis> – use
                                                <userinput>ns_all:true</userinput> to visualize the
                                            entire annotation graph. Specifying e.g.
                                                <userinput>node_ns:tiger</userinput> or
                                                <userinput>edge_ns:tiger</userinput> instead causes
                                            only nodes and edges of the namespace tiger to be
                                            visualized (i.e. only a subgraph of all annotations)
                                        </para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">grid</emphasis> – it is
                                            possible to specify the order of annotation layers in
                                            each grid. Use <userinput>annos: anno_name1, anno_name2,
                                                anno_name3</userinput> to specify the order or
                                            annotation layers. If <userinput>anno:</userinput> is
                                            used, additional annotation layers not present in the
                                            list will not be visualized. If mappings is left empty,
                                            layers will be ordered alphabetically</para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis role="italic">grid_tree</emphasis> – specify
                                            the name of the annotation to be visualized in the grid
                                            with <userinput>node_key:name</userinput>. Note that all
                                            grid levels visualize the same annotation name at
                                            different hierarchical depths.</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                    </itemizedlist></para>
            </section>
            <section xml:id="annis-admin-vis-software-requirement">
                <title>Visualizations with Software Requirements</title>
                <para>Some ANNIS visualizers require additional software, depending on whether or
                    not they render graphics as an image directly in Java or not. At present, three
                    visualizations require an installation of the freely available software GraphViz
                        (<link xlink:href="http://www.graphviz.org/"
                    >http://www.graphviz.org/</link>): <emphasis role="italic"
                        >ordered_dependency</emphasis>, <emphasis role="italic"
                        >hierarchical_dependency</emphasis> and the general <emphasis role="italic"
                        >graph</emphasis> visualization. To use these, install GraphViz on the
                    server (or your local machine for Kickstarter) and make sure it is available in
                    your system path (check this by calling e.g. the program <command>dot</command>
                    on the command line).</para>
                <para>Another type of restriction is that some visualizers may use SVG (scalable
                    vector graphics) instead of images, which mean the user’s browser must be SVG
                    capable (e.g. FireFox) or a plugin must be used (e.g. for Internet Explorer 8 or
                    below). This is currently the case for the <emphasis role="italic"
                        >arch_dependency</emphasis> visualizer.</para>
            </section>
            <section>
                <title>Changing maximal context size and possible context steps</title>
                <para>The maximal context size of <emphasis role="italic">±n</emphasis> tokens from
                    each search result (for the KWIC view, but also for other visualization) can be
                    set for the ANNIS service in the file
                        <filename>&lt;service-home>/conf/annis-service.properties</filename> Using
                    the syntax, e.g. for a maximum context of 10 tokens:
                    <programlisting>annis.max-context=1025</programlisting> To configure which steps
                    are actually shown in the front-end (up to the maximum allowed by the service
                    above) and the default context selected on login, configure the file:
                        <filename>&lt;annis-web-home->/javascript/annis/config.js</filename> With
                    the syntax:
                    <programlisting>var search_context = [[0], [1], [2], [5], [10]]; 
var search_context_default = 5;</programlisting></para>
            </section>
        </section>
    </section>

</article>
