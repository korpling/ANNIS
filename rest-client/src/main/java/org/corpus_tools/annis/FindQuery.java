/*
 * graphANNIS
 * Access the graphANNIS corpora and execute AQL queries with this service. 
 *
 * OpenAPI spec version: 0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.corpus_tools.annis;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.corpus_tools.annis.CorpusList;
import org.corpus_tools.annis.QueryLanguage;
/**
 * Query definition to find matches
 */
@Schema(description = "Query definition to find matches")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-26T15:55:16.485632+02:00[Europe/Berlin]")
public class FindQuery {
  @SerializedName("query")
  private String query = null;

  @SerializedName("query_language")
  private QueryLanguage queryLanguage = null;

  @SerializedName("corpora")
  private CorpusList corpora = null;

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("offset")
  private Integer offset = 0;

  /**
   * Gets or Sets order
   */
  @JsonAdapter(OrderEnum.Adapter.class)
  public enum OrderEnum {
    NORMAL("Normal"),
    INVERTED("Inverted"),
    RANDOMIZED("Randomized"),
    NOTSORTED("NotSorted");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OrderEnum fromValue(String text) {
      for (OrderEnum b : OrderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("order")
  private OrderEnum order = OrderEnum.NORMAL;

  public FindQuery query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The query to execute.
   * @return query
  **/
  @Schema(example = "tok", description = "The query to execute.")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public FindQuery queryLanguage(QueryLanguage queryLanguage) {
    this.queryLanguage = queryLanguage;
    return this;
  }

   /**
   * Get queryLanguage
   * @return queryLanguage
  **/
  @Schema(description = "")
  public QueryLanguage getQueryLanguage() {
    return queryLanguage;
  }

  public void setQueryLanguage(QueryLanguage queryLanguage) {
    this.queryLanguage = queryLanguage;
  }

  public FindQuery corpora(CorpusList corpora) {
    this.corpora = corpora;
    return this;
  }

   /**
   * Get corpora
   * @return corpora
  **/
  @Schema(description = "")
  public CorpusList getCorpora() {
    return corpora;
  }

  public void setCorpora(CorpusList corpora) {
    this.corpora = corpora;
  }

  public FindQuery limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Return at most &#x60;n&#x60; matches, where &#x60;n&#x60; is the limit.  Use &#x60;null&#x60; to allow unlimited result sizes.
   * @return limit
  **/
  @Schema(example = "10", description = "Return at most `n` matches, where `n` is the limit.  Use `null` to allow unlimited result sizes.")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public FindQuery offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Skip the &#x60;n&#x60; first results, where &#x60;n&#x60; is the offset.
   * @return offset
  **/
  @Schema(description = "Skip the `n` first results, where `n` is the offset.")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public FindQuery order(OrderEnum order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @Schema(description = "")
  public OrderEnum getOrder() {
    return order;
  }

  public void setOrder(OrderEnum order) {
    this.order = order;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindQuery findQuery = (FindQuery) o;
    return Objects.equals(this.query, findQuery.query) &&
        Objects.equals(this.queryLanguage, findQuery.queryLanguage) &&
        Objects.equals(this.corpora, findQuery.corpora) &&
        Objects.equals(this.limit, findQuery.limit) &&
        Objects.equals(this.offset, findQuery.offset) &&
        Objects.equals(this.order, findQuery.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, queryLanguage, corpora, limit, offset, order);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindQuery {\n");
    
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryLanguage: ").append(toIndentedString(queryLanguage)).append("\n");
    sb.append("    corpora: ").append(toIndentedString(corpora)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
