/*
 * graphANNIS
 * Access the graphANNIS corpora and execute AQL queries with this service. 
 *
 * OpenAPI spec version: 0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.corpus_tools.annis;

import org.corpus_tools.ApiCallback;
import org.corpus_tools.ApiClient;
import org.corpus_tools.ApiException;
import org.corpus_tools.ApiResponse;
import org.corpus_tools.Configuration;
import org.corpus_tools.Pair;
import org.corpus_tools.ProgressRequestBody;
import org.corpus_tools.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.corpus_tools.annis.Annotation;
import org.corpus_tools.annis.AnnotationComponentType;
import org.corpus_tools.annis.Component;
import org.corpus_tools.annis.CorpusConfiguration;
import org.corpus_tools.annis.CorpusList;
import org.corpus_tools.annis.QueryLanguage;
import org.corpus_tools.annis.SubgraphWithContext;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CorporaApi {
    private ApiClient apiClient;

    public CorporaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CorporaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for corpusComponents
     * @param corpus The name of the corpus to get the components for. (required)
     * @param type Only return components with this type. (optional)
     * @param name Only return components with this name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call corpusComponentsCall(String corpus, String type, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/components"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call corpusComponentsValidateBeforeCall(String corpus, String type, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling corpusComponents(Async)");
        }
        
        com.squareup.okhttp.Call call = corpusComponentsCall(corpus, type, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all edge components of the corpus.
     * 
     * @param corpus The name of the corpus to get the components for. (required)
     * @param type Only return components with this type. (optional)
     * @param name Only return components with this name. (optional)
     * @return List&lt;Component&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Component> corpusComponents(String corpus, String type, String name) throws ApiException {
        ApiResponse<List<Component>> resp = corpusComponentsWithHttpInfo(corpus, type, name);
        return resp.getData();
    }

    /**
     * List all edge components of the corpus.
     * 
     * @param corpus The name of the corpus to get the components for. (required)
     * @param type Only return components with this type. (optional)
     * @param name Only return components with this name. (optional)
     * @return ApiResponse&lt;List&lt;Component&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Component>> corpusComponentsWithHttpInfo(String corpus, String type, String name) throws ApiException {
        com.squareup.okhttp.Call call = corpusComponentsValidateBeforeCall(corpus, type, name, null, null);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all edge components of the corpus. (asynchronously)
     * 
     * @param corpus The name of the corpus to get the components for. (required)
     * @param type Only return components with this type. (optional)
     * @param name Only return components with this name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call corpusComponentsAsync(String corpus, String type, String name, final ApiCallback<List<Component>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = corpusComponentsValidateBeforeCall(corpus, type, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Component>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for corpusConfiguration
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call corpusConfigurationCall(String corpus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/configuration"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call corpusConfigurationValidateBeforeCall(String corpus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling corpusConfiguration(Async)");
        }
        
        com.squareup.okhttp.Call call = corpusConfigurationCall(corpus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the corpus configuration object.
     * The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @return CorpusConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CorpusConfiguration corpusConfiguration(String corpus) throws ApiException {
        ApiResponse<CorpusConfiguration> resp = corpusConfigurationWithHttpInfo(corpus);
        return resp.getData();
    }

    /**
     * Get the corpus configuration object.
     * The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @return ApiResponse&lt;CorpusConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CorpusConfiguration> corpusConfigurationWithHttpInfo(String corpus) throws ApiException {
        com.squareup.okhttp.Call call = corpusConfigurationValidateBeforeCall(corpus, null, null);
        Type localVarReturnType = new TypeToken<CorpusConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the corpus configuration object. (asynchronously)
     * The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call corpusConfigurationAsync(String corpus, final ApiCallback<CorpusConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = corpusConfigurationValidateBeforeCall(corpus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CorpusConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for corpusEdgeAnnotations
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param type The component type. (required)
     * @param layer The component layer. (required)
     * @param name The component name. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call corpusEdgeAnnotationsCall(String corpus, String type, String layer, String name, Boolean listValues, Boolean onlyMostFrequentValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/edge-annotations/{type}/{layer}/{name}/"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "layer" + "\\}", apiClient.escapeString(layer.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listValues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("list_values", listValues));
        if (onlyMostFrequentValues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("only_most_frequent_values", onlyMostFrequentValues));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call corpusEdgeAnnotationsValidateBeforeCall(String corpus, String type, String layer, String name, Boolean listValues, Boolean onlyMostFrequentValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling corpusEdgeAnnotations(Async)");
        }
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling corpusEdgeAnnotations(Async)");
        }
        // verify the required parameter 'layer' is set
        if (layer == null) {
            throw new ApiException("Missing the required parameter 'layer' when calling corpusEdgeAnnotations(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling corpusEdgeAnnotations(Async)");
        }
        
        com.squareup.okhttp.Call call = corpusEdgeAnnotationsCall(corpus, type, layer, name, listValues, onlyMostFrequentValues, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all annotations of the corpus for a given edge component
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param type The component type. (required)
     * @param layer The component layer. (required)
     * @param name The component name. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Annotation> corpusEdgeAnnotations(String corpus, String type, String layer, String name, Boolean listValues, Boolean onlyMostFrequentValues) throws ApiException {
        ApiResponse<List<Annotation>> resp = corpusEdgeAnnotationsWithHttpInfo(corpus, type, layer, name, listValues, onlyMostFrequentValues);
        return resp.getData();
    }

    /**
     * List all annotations of the corpus for a given edge component
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param type The component type. (required)
     * @param layer The component layer. (required)
     * @param name The component name. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Annotation>> corpusEdgeAnnotationsWithHttpInfo(String corpus, String type, String layer, String name, Boolean listValues, Boolean onlyMostFrequentValues) throws ApiException {
        com.squareup.okhttp.Call call = corpusEdgeAnnotationsValidateBeforeCall(corpus, type, layer, name, listValues, onlyMostFrequentValues, null, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all annotations of the corpus for a given edge component (asynchronously)
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param type The component type. (required)
     * @param layer The component layer. (required)
     * @param name The component name. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call corpusEdgeAnnotationsAsync(String corpus, String type, String layer, String name, Boolean listValues, Boolean onlyMostFrequentValues, final ApiCallback<List<Annotation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = corpusEdgeAnnotationsValidateBeforeCall(corpus, type, layer, name, listValues, onlyMostFrequentValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for corpusFiles
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param name The name of the file node. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call corpusFilesCall(String corpus, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/files"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call corpusFilesValidateBeforeCall(String corpus, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling corpusFiles(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling corpusFiles(Async)");
        }
        
        com.squareup.okhttp.Call call = corpusFilesCall(corpus, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an associated file for the corpus.
     * The annotation graph of a corpus can contain special nodes of the type \&quot;file\&quot;,  which are connected to (sub-) corpus and document nodes with a &#x60;PartOf&#x60; relation. This endpoint allows to access the content of these file nodes. It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests)  if you only need to access parts of the file. 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param name The name of the file node. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void corpusFiles(String corpus, String name) throws ApiException {
        corpusFilesWithHttpInfo(corpus, name);
    }

    /**
     * Get an associated file for the corpus.
     * The annotation graph of a corpus can contain special nodes of the type \&quot;file\&quot;,  which are connected to (sub-) corpus and document nodes with a &#x60;PartOf&#x60; relation. This endpoint allows to access the content of these file nodes. It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests)  if you only need to access parts of the file. 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param name The name of the file node. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> corpusFilesWithHttpInfo(String corpus, String name) throws ApiException {
        com.squareup.okhttp.Call call = corpusFilesValidateBeforeCall(corpus, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get an associated file for the corpus. (asynchronously)
     * The annotation graph of a corpus can contain special nodes of the type \&quot;file\&quot;,  which are connected to (sub-) corpus and document nodes with a &#x60;PartOf&#x60; relation. This endpoint allows to access the content of these file nodes. It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests)  if you only need to access parts of the file. 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param name The name of the file node. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call corpusFilesAsync(String corpus, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = corpusFilesValidateBeforeCall(corpus, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for corpusNodeAnnotations
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call corpusNodeAnnotationsCall(String corpus, Boolean listValues, Boolean onlyMostFrequentValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/node-annotations"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (listValues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("list_values", listValues));
        if (onlyMostFrequentValues != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("only_most_frequent_values", onlyMostFrequentValues));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call corpusNodeAnnotationsValidateBeforeCall(String corpus, Boolean listValues, Boolean onlyMostFrequentValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling corpusNodeAnnotations(Async)");
        }
        
        com.squareup.okhttp.Call call = corpusNodeAnnotationsCall(corpus, listValues, onlyMostFrequentValues, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all node annotations of the corpus.
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @return List&lt;Annotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Annotation> corpusNodeAnnotations(String corpus, Boolean listValues, Boolean onlyMostFrequentValues) throws ApiException {
        ApiResponse<List<Annotation>> resp = corpusNodeAnnotationsWithHttpInfo(corpus, listValues, onlyMostFrequentValues);
        return resp.getData();
    }

    /**
     * List all node annotations of the corpus.
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @return ApiResponse&lt;List&lt;Annotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Annotation>> corpusNodeAnnotationsWithHttpInfo(String corpus, Boolean listValues, Boolean onlyMostFrequentValues) throws ApiException {
        com.squareup.okhttp.Call call = corpusNodeAnnotationsValidateBeforeCall(corpus, listValues, onlyMostFrequentValues, null, null);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all node annotations of the corpus. (asynchronously)
     * 
     * @param corpus The name of the corpus to get the configuration for. (required)
     * @param listValues If true, possible values are returned. (optional, default to false)
     * @param onlyMostFrequentValues If true, only the most frequent value per annotation is returned. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call corpusNodeAnnotationsAsync(String corpus, Boolean listValues, Boolean onlyMostFrequentValues, final ApiCallback<List<Annotation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = corpusNodeAnnotationsValidateBeforeCall(corpus, listValues, onlyMostFrequentValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Annotation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCorpora
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCorporaCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCorporaValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listCorporaCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of all corpora the user is authorized to use.
     * 
     * @return CorpusList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CorpusList listCorpora() throws ApiException {
        ApiResponse<CorpusList> resp = listCorporaWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of all corpora the user is authorized to use.
     * 
     * @return ApiResponse&lt;CorpusList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CorpusList> listCorporaWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listCorporaValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CorpusList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all corpora the user is authorized to use. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCorporaAsync(final ApiCallback<CorpusList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCorporaValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CorpusList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subgraphForNodes
     * @param body The definition of the subgraph to extract. (required)
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subgraphForNodesCall(SubgraphWithContext body, String corpus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/subgraph"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subgraphForNodesValidateBeforeCall(SubgraphWithContext body, String corpus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subgraphForNodes(Async)");
        }
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling subgraphForNodes(Async)");
        }
        
        com.squareup.okhttp.Call call = subgraphForNodesCall(body, corpus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     * This creates a subgraph for node IDs, which can e.g. generated by executing a &#x60;find&#x60; query. The subgraph contains  - the given nodes,  - all tokens that are covered by the given nodes, - all tokens left and right in the given context from the tokens covered by the give nodes, - all other nodes covering the tokens of the given context. The annotation graph also includes all edges between the included nodes. 
     * @param body The definition of the subgraph to extract. (required)
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String subgraphForNodes(SubgraphWithContext body, String corpus) throws ApiException {
        ApiResponse<String> resp = subgraphForNodesWithHttpInfo(body, corpus);
        return resp.getData();
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     * This creates a subgraph for node IDs, which can e.g. generated by executing a &#x60;find&#x60; query. The subgraph contains  - the given nodes,  - all tokens that are covered by the given nodes, - all tokens left and right in the given context from the tokens covered by the give nodes, - all other nodes covering the tokens of the given context. The annotation graph also includes all edges between the included nodes. 
     * @param body The definition of the subgraph to extract. (required)
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> subgraphForNodesWithHttpInfo(SubgraphWithContext body, String corpus) throws ApiException {
        com.squareup.okhttp.Call call = subgraphForNodesValidateBeforeCall(body, corpus, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context. (asynchronously)
     * This creates a subgraph for node IDs, which can e.g. generated by executing a &#x60;find&#x60; query. The subgraph contains  - the given nodes,  - all tokens that are covered by the given nodes, - all tokens left and right in the given context from the tokens covered by the give nodes, - all other nodes covering the tokens of the given context. The annotation graph also includes all edges between the included nodes. 
     * @param body The definition of the subgraph to extract. (required)
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subgraphForNodesAsync(SubgraphWithContext body, String corpus, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subgraphForNodesValidateBeforeCall(body, corpus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subgraphForQuery
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param query The query which defines the nodes to include. (required)
     * @param queryLanguage  (optional)
     * @param componentTypeFilter If given, restricts the included edges to components with the given type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subgraphForQueryCall(String corpus, String query, QueryLanguage queryLanguage, AnnotationComponentType componentTypeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/corpora/{corpus}/subgraph-for-query"
            .replaceAll("\\{" + "corpus" + "\\}", apiClient.escapeString(corpus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (queryLanguage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_language", queryLanguage));
        if (componentTypeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component_type_filter", componentTypeFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subgraphForQueryValidateBeforeCall(String corpus, String query, QueryLanguage queryLanguage, AnnotationComponentType componentTypeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corpus' is set
        if (corpus == null) {
            throw new ApiException("Missing the required parameter 'corpus' when calling subgraphForQuery(Async)");
        }
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling subgraphForQuery(Async)");
        }
        
        com.squareup.okhttp.Call call = subgraphForQueryCall(corpus, query, queryLanguage, componentTypeFilter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     * This only includes the nodes that are the result of the given query and no context is created automatically. The annotation graph also includes all edges between the included nodes. 
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param query The query which defines the nodes to include. (required)
     * @param queryLanguage  (optional)
     * @param componentTypeFilter If given, restricts the included edges to components with the given type. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String subgraphForQuery(String corpus, String query, QueryLanguage queryLanguage, AnnotationComponentType componentTypeFilter) throws ApiException {
        ApiResponse<String> resp = subgraphForQueryWithHttpInfo(corpus, query, queryLanguage, componentTypeFilter);
        return resp.getData();
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     * This only includes the nodes that are the result of the given query and no context is created automatically. The annotation graph also includes all edges between the included nodes. 
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param query The query which defines the nodes to include. (required)
     * @param queryLanguage  (optional)
     * @param componentTypeFilter If given, restricts the included edges to components with the given type. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> subgraphForQueryWithHttpInfo(String corpus, String query, QueryLanguage queryLanguage, AnnotationComponentType componentTypeFilter) throws ApiException {
        com.squareup.okhttp.Call call = subgraphForQueryValidateBeforeCall(corpus, query, queryLanguage, componentTypeFilter, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a subgraph of the corpus format given a list of nodes and a context. (asynchronously)
     * This only includes the nodes that are the result of the given query and no context is created automatically. The annotation graph also includes all edges between the included nodes. 
     * @param corpus The name of the corpus to get the subgraph for. (required)
     * @param query The query which defines the nodes to include. (required)
     * @param queryLanguage  (optional)
     * @param componentTypeFilter If given, restricts the included edges to components with the given type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subgraphForQueryAsync(String corpus, String query, QueryLanguage queryLanguage, AnnotationComponentType componentTypeFilter, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subgraphForQueryValidateBeforeCall(corpus, query, queryLanguage, componentTypeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
