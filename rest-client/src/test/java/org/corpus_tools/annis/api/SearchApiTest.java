/*
 * graphANNIS
 * Access the graphANNIS corpora and execute AQL queries with this service. 
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.corpus_tools.annis.api;

import org.corpus_tools.annis.ApiException;
import org.corpus_tools.annis.api.model.AnnotationComponentType;
import org.corpus_tools.annis.api.model.CountExtra;
import org.corpus_tools.annis.api.model.CountQuery;
import org.corpus_tools.annis.api.model.FindQuery;
import org.corpus_tools.annis.api.model.FrequencyQuery;
import org.corpus_tools.annis.api.model.FrequencyTableRow;
import org.corpus_tools.annis.api.model.QueryLanguage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Ignore
public class SearchApiTest {

    private final SearchApi api = new SearchApi();

    
    /**
     * Count the number of results for a query.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countTest() throws ApiException {
        CountQuery countQuery = null;
        CountExtra response = api.count(countQuery);

        // TODO: test validations
    }
    
    /**
     * Find results for a query and return the IDs of the matched nodes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTest() throws ApiException {
        FindQuery findQuery = null;
        String response = api.find(findQuery);

        // TODO: test validations
    }
    
    /**
     * Find results for a query and return the IDs of the matched nodes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void frequencyTest() throws ApiException {
        FrequencyQuery frequencyQuery = null;
        List<FrequencyTableRow> response = api.frequency(frequencyQuery);

        // TODO: test validations
    }
    
    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     *
     * This only includes the nodes that are the result of the given query and no context is created automatically. The annotation graph also includes all edges between the included nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subgraphForQueryTest() throws ApiException {
        String corpus = null;
        String query = null;
        QueryLanguage queryLanguage = null;
        AnnotationComponentType componentTypeFilter = null;
        String response = api.subgraphForQuery(corpus, query, queryLanguage, componentTypeFilter);

        // TODO: test validations
    }
    
}
