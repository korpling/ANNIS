/*
 * graphANNIS
 * Access the graphANNIS corpora and execute AQL queries with this service. 
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.corpus_tools.api;

import org.corpus_tools.ApiException;
import org.corpus_tools.annis.api.model.Annotation;
import org.corpus_tools.annis.api.model.AnnotationComponentType;
import org.corpus_tools.annis.api.model.Component;
import org.corpus_tools.annis.api.model.CorpusConfiguration;
import org.corpus_tools.annis.api.model.QueryLanguage;
import org.corpus_tools.annis.api.model.SubgraphWithContext;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CorporaApi
 */
@Ignore
public class CorporaApiTest {

    private final CorporaApi api = new CorporaApi();

    
    /**
     * List all edge components of the corpus.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusComponentsTest() throws ApiException {
        String corpus = null;
        String type = null;
        String name = null;
        List<Component> response = api.corpusComponents(corpus, type, name);

        // TODO: test validations
    }
    
    /**
     * Get the corpus configuration object.
     *
     * The corpus configuration is created by the corpus authors to configure how the corpus should be displayed in query engines and visualizers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusConfigurationTest() throws ApiException {
        String corpus = null;
        CorpusConfiguration response = api.corpusConfiguration(corpus);

        // TODO: test validations
    }
    
    /**
     * List all annotations of the corpus for a given edge component
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusEdgeAnnotationsTest() throws ApiException {
        String corpus = null;
        String type = null;
        String layer = null;
        String name = null;
        Boolean listValues = null;
        Boolean onlyMostFrequentValues = null;
        List<Annotation> response = api.corpusEdgeAnnotations(corpus, type, layer, name, listValues, onlyMostFrequentValues);

        // TODO: test validations
    }
    
    /**
     * Get an associated file for the corpus.
     *
     * The annotation graph of a corpus can contain special nodes of the type \&quot;file\&quot;,  which are connected to (sub-) corpus and document nodes with a &#x60;PartOf&#x60; relation. This endpoint allows to access the content of these file nodes. It supports [HTTP range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests)  if you only need to access parts of the file. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusFilesTest() throws ApiException {
        String corpus = null;
        String name = null;
        api.corpusFiles(corpus, name);

        // TODO: test validations
    }
    
    /**
     * List all node annotations of the corpus.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusNodeAnnotationsTest() throws ApiException {
        String corpus = null;
        Boolean listValues = null;
        Boolean onlyMostFrequentValues = null;
        List<Annotation> response = api.corpusNodeAnnotations(corpus, listValues, onlyMostFrequentValues);

        // TODO: test validations
    }
    
    /**
     * Get a list of all corpora the user is authorized to use.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCorporaTest() throws ApiException {
        List<String> response = api.listCorpora();

        // TODO: test validations
    }
    
    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     *
     * This creates a subgraph for node IDs, which can e.g. generated by executing a &#x60;find&#x60; query. The subgraph contains  - the given nodes,  - all tokens that are covered by the given nodes, - all tokens left and right in the given context from the tokens covered by the give nodes, - all other nodes covering the tokens of the given context. The annotation graph also includes all edges between the included nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subgraphForNodesTest() throws ApiException {
        String corpus = null;
        SubgraphWithContext subgraphWithContext = null;
        String response = api.subgraphForNodes(corpus, subgraphWithContext);

        // TODO: test validations
    }
    
    /**
     * Get a subgraph of the corpus format given a list of nodes and a context.
     *
     * This only includes the nodes that are the result of the given query and no context is created automatically. The annotation graph also includes all edges between the included nodes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subgraphForQueryTest() throws ApiException {
        String corpus = null;
        String query = null;
        QueryLanguage queryLanguage = null;
        AnnotationComponentType componentTypeFilter = null;
        String response = api.subgraphForQuery(corpus, query, queryLanguage, componentTypeFilter);

        // TODO: test validations
    }
    
}
